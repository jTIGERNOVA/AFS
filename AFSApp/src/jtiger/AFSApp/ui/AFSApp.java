/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jtiger.AFSApp.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author antonioj
 */
public class AFSApp extends javax.swing.JFrame {

    private JFileChooser chooser;
    private Runnable onClose;
    private final String[] endpoints;
    private OnDestinationSelectedListener destinationSelectedListener;
    private OnAFSExecutedListener executedListener;

    public AFSApp() {
        this(null);
    }

    /**
     * Creates new form AFSApp
     */
    public AFSApp(String[] endpoints) {
        initComponents();

        setTitle("AFS");
        setLocationByPlatform(true);
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(AFSApp.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.endpoints = endpoints;
        loadEndpoints();
    }

    public Runnable getOnClose() {
        return onClose;
    }

    public void setOnClose(Runnable onClose) {
        this.onClose = onClose;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        addFiles = new javax.swing.JButton();
        srcDisplay = new JTextField();
        jLabel6 = new javax.swing.JLabel();
        destDsplay = new JTextField();
        destFile = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        endpointsComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        isFilePost = new javax.swing.JCheckBox();
        isGetStatus = new javax.swing.JCheckBox();
        isGetResult = new javax.swing.JCheckBox();
        start = new javax.swing.JButton();
        executionID = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        pendingList = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        doneList = new javax.swing.JList();
        readDone = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("AFS");

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel2.setText("Source:");

        addFiles.setText("Browse");
        addFiles.setToolTipText("");
        addFiles.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addFilesActionPerformed(evt);
            }
        });

        srcDisplay.setEditable(false);
        srcDisplay.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                srcDisplayActionPerformed(evt);
            }
        });

        jLabel6.setText("Results Path:");

        destDsplay.setEditable(false);
        destDsplay.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                destDsplayActionPerformed(evt);
            }
        });

        destFile.setText("Browse");
        destFile.setToolTipText("");
        destFile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                destFileActionPerformed(evt);
            }
        });

        jLabel7.setText("Endpoint:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(srcDisplay)
                    .addComponent(destDsplay, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(addFiles)
                            .addComponent(jLabel6)
                            .addComponent(destFile)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endpointsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(endpointsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(2, 2, 2)
                .addComponent(srcDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addFiles)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(2, 2, 2)
                .addComponent(destDsplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destFile)
                .addGap(24, 24, 24))
        );

        jLabel3.setText("Options");

        isFilePost.setText("Do File Post");

        isGetStatus.setText("Do Get Status");

        isGetResult.setText("Do Result");

        start.setText("Start");
        start.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        executionID.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        executionID.setForeground(new java.awt.Color(51, 255, 204));
        executionID.setText("0000");

        jLabel8.setText("Next Run:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(isFilePost)
                    .addComponent(isGetStatus)
                    .addComponent(isGetResult)
                    .addComponent(start))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executionID)
                .addContainerGap(111, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(isFilePost)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(isGetStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(isGetResult)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(start)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(executionID)
                    .addComponent(jLabel8))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(pendingList);

        jLabel5.setText("Pending");

        jLabel4.setText("Done");

        jScrollPane2.setViewportView(doneList);

        readDone.setText("Read");
        readDone.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                readDoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(readDone))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readDone)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFilesActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addFilesActionPerformed

        showDirChooser(srcDisplay);
    }//GEN-LAST:event_addFilesActionPerformed

    private void startActionPerformed(ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        if (!isPathValid(srcDisplay)) {
            JOptionPane.showMessageDialog(this, "Select file first");
            return;
        }
        if (!isPathValid(destDsplay)) {
            JOptionPane.showMessageDialog(this, "Select a results path first");
            return;
        }
        if (!isFilePost.isSelected() && !isGetStatus.isSelected() && !isGetResult.isSelected()) {
            JOptionPane.showMessageDialog(this, "You must select at least 1 option");
            return;
        }
        if ((isFilePost.isSelected() && isGetResult.isSelected()) && !isGetStatus.isSelected()) {
            JOptionPane.showMessageDialog(this, "POST and RESULT can not be selected without GETSTATUS");
            return;
        }

        if (destinationSelectedListener != null) {
            destinationSelectedListener.onSelected(destDsplay.getText());
        }

        AFSInput input = new AFSInput();
        input.endpoint = getSelectedEndpoint();
        input.srcDir = srcDisplay.getText();
        input.destDir = destDsplay.getText();
        input.shouldDoPost = isFilePost.isSelected();
        input.shouldDoGetStatus = isGetStatus.isSelected();
        input.shouldDoGetResult = isGetResult.isSelected();

        if (executedListener != null) {
            executedListener.onExecute(input);
        }
    }//GEN-LAST:event_startActionPerformed

    public class AFSInput {

        public String endpoint;
        public String srcDir;
        public String destDir;
        public boolean shouldDoPost;
        public boolean shouldDoGetStatus;
        public boolean shouldDoGetResult;

    }

    public String[] getEndpoints() {
        return endpoints;
    }

    public OnDestinationSelectedListener getDestinationSelectedListener() {
        return destinationSelectedListener;
    }

    public void setDestinationSelectedListener(OnDestinationSelectedListener destinationSelectedListener) {
        this.destinationSelectedListener = destinationSelectedListener;
    }

    public OnAFSExecutedListener getExecutedListener() {
        return executedListener;
    }

    public void setExecutedListener(OnAFSExecutedListener executedListener) {
        this.executedListener = executedListener;
    }


    private void readDoneActionPerformed(ActionEvent evt) {//GEN-FIRST:event_readDoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_readDoneActionPerformed

    private void srcDisplayActionPerformed(ActionEvent evt) {//GEN-FIRST:event_srcDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_srcDisplayActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if (onClose != null) {
            onClose.run();
        }
    }//GEN-LAST:event_formWindowClosed

    private void destDsplayActionPerformed(ActionEvent evt) {//GEN-FIRST:event_destDsplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destDsplayActionPerformed

    private void destFileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_destFileActionPerformed
        showDirChooser(destDsplay);
    }//GEN-LAST:event_destFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AFSApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(AFSApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(AFSApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(AFSApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AFSApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFiles;
    private JTextField destDsplay;
    private javax.swing.JButton destFile;
    private javax.swing.JList doneList;
    private javax.swing.JComboBox endpointsComboBox;
    private javax.swing.JLabel executionID;
    private javax.swing.JCheckBox isFilePost;
    private javax.swing.JCheckBox isGetResult;
    private javax.swing.JCheckBox isGetStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JList pendingList;
    private javax.swing.JButton readDone;
    private JTextField srcDisplay;
    private javax.swing.JButton start;
    // End of variables declaration//GEN-END:variables

    private void showDirChooser(final JTextField display) {
        chooser = new JFileChooser();

        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File file) {
                return file.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Directories";
            }
        });

        chooser.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                File file = chooser.getSelectedFile();

                if (file != null) {
                    display.setText(file.getPath());
                }
            }
        });

        chooser.setAcceptAllFileFilterUsed(false);
        chooser.showOpenDialog(this);
    }

    public void setExecutionID(String executionID){
        this.executionID.setText(executionID);
    }
    
    private boolean isPathValid(JTextField display) {
        return display.getText() != null && display.getText().trim().length() > 0;
    }

    public String getSelectedEndpoint() {
        return (String) endpointsComboBox.getSelectedItem();
    }

    private void loadEndpoints() {
        if (endpoints == null) {
            endpointsComboBox.setModel(new DefaultComboBoxModel(new String[]{"http://gmail.com"}));
        } else {
            endpointsComboBox.setModel(new DefaultComboBoxModel(endpoints));
        }
    }

    public interface OnDestinationSelectedListener {

        public void onSelected(String dest);
    }

    public interface OnAFSExecutedListener {

        public void onExecute(AFSInput input);
    }
}
